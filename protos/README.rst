Building the Protocol Interface Package
---------------------------------------

The following explains how to create a python package containing the autogenerated interface source generated from proto files.

Directory Structure
~~~~~~~~~~~~~~~~~~~

The ``ansys`` directory contains a simple greeter service containing
the following directory structure.

::

   ─ansys
   │   ├───api
   │   │   ├───greeter_example
   │   │   │   ├───v1
   │   │   │   │   ├───greeter.proto
   │   │   │   │   └───VERSION

This follows the standard ansys.api.<serviceroot>.<services>


To Build
~~~~~~~~

First, install `pyansys-protos-generator <https://github.com/pyansys/pyansys-protos-generator>`_ with:

.. code::

   pip install ansys-tools-protos-generator

Next, build the package locally from this directory with:

.. code::

   python -m ansys.tools.protos_generator ansys/api/greeter_example/v1

This will create a local source distrubtion
``dist/ansys-api-greeter_example-v1-0.1.0.tar.gz`` within ``dist`` in your
current working directory.  Finally, install this package with:

.. code::

   dist/ansys-api-greeter_example-v1-0.1.0.tar.gz

The service module can then be imported within python with:

.. code:: python

   from ansys.api.greeter_example.v1 import greeter_pb2


Methodology
~~~~~~~~~~~
This approach is recommended over including the auto-generated gRPC
files within your source directory as you can upgrade the gRPC
interface separately from the server or client packages.  Furthermore,
you can upload this interface package to `PyPi <https://pypi.org/>`_
and have it required as a dependency for your client packages.
